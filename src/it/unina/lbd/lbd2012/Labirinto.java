/*
 * DBFrame.java
 *
 * Created on 5 novembre 2006, 8.48
 */
package it.unina.lbd.lbd2012;

import java.awt.Cursor;
import java.sql.*;
import java.util.regex.*;
import javax.swing.JOptionPane;

/**
 *
 * @author Massimo
 * @author ADeLuca
 * @author Giustino Borzacchiello - Raffaele Capasso
 * @version 2012
 */
public class Labirinto extends DBFrame {

    private final int MAX_ALTEZZA = 35;
    private final int MIN_ALTEZZA = 3;
    private final int MAX_LARGHEZZA = 50;
    private final int MIN_LARGHEZZA = 3;

    /**
     * Creates new form DBFrame
     */
    public Labirinto(int modalita) {
        super();
        initComponents();
        setModalita(modalita);
        setFrameTable(tabLabirinto);
        setNomeTabella("Labirinto");
    }

    @Override
    public void setModalita(int modo) {
        super.setModalita(modo);
        switch (modo) {
            case APPEND_QUERY:
                tNome.setEnabled(true);
                tLarghezza.setEnabled(true);
                tAltezza.setEnabled(true);
                bEditLabirinto.setText("Edit Labirinto");
                bEditLabirinto.setEnabled(false);
                break;
            case BROWSE:
                tNome.setEnabled(false);
                tLarghezza.setEnabled(false);
                tAltezza.setEnabled(false);
                break;
            case UPDATE:
                tNome.setEnabled(true);
                tLarghezza.setEnabled(true);
                tAltezza.setEnabled(true);
                bEditLabirinto.setText("Edit Labirinto");
                bEditLabirinto.setEnabled(false);
                break;
        }
    }

    @Override
    protected void mostraErrori(SQLException e, String query, int contesto) {
        String msg;
        if (e.getErrorCode() == 1) {
            msg = "Esiste gia' un altro labirinto con lo stesso codice";
            JOptionPane.showMessageDialog(this, msg, "Errore",
                    JOptionPane.ERROR_MESSAGE);
        } else {
            super.mostraErrori(e, query, contesto);
        }
    }

    @Override
    protected void premutoOK() {
        if (getPadre() != null) {
            getPadre().setProprietaPadre("Labirinto", getTCodice().getText());
            try {
                rs.close();
            } catch (SQLException e) {
                mostraErrori(e);
            }
            dispose();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lNome = new javax.swing.JLabel();
        tNome = new javax.swing.JTextField();
        spLabirinto = new javax.swing.JScrollPane();
        tabLabirinto = new javax.swing.JTable();
        tLarghezza = new javax.swing.JTextField();
        lLarghezza = new javax.swing.JLabel();
        tAltezza = new javax.swing.JTextField();
        lAltezza = new javax.swing.JLabel();
        bEditLabirinto = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Labirinto");

        lNome.setText("Nome");

        tNome.setToolTipText("Nome del labirinto");

        tabLabirinto.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        spLabirinto.setViewportView(tabLabirinto);

        tLarghezza.setToolTipText("Inserisci il numero di caselle. Min: 3, Max: 50");

        lLarghezza.setText("Larghezza");

        tAltezza.setToolTipText("Inserisci il numero di caselle. Min: 3, Max: 35");

        lAltezza.setText("Altezza");

        bEditLabirinto.setText("Edit Labirinto");
        bEditLabirinto.setEnabled(false);
        bEditLabirinto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bEditLabirintoActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(19, 19, 19)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                    .add(spLabirinto, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 774, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(lNome)
                            .add(lLarghezza)
                            .add(lAltezza))
                        .add(26, 26, 26)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(layout.createSequentialGroup()
                                .add(tAltezza, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 385, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .add(bEditLabirinto))
                            .add(tLarghezza, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 385, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(tNome, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 385, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap(96, Short.MAX_VALUE)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(lNome)
                    .add(tNome, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(lLarghezza)
                    .add(tLarghezza, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(lAltezza)
                    .add(tAltezza, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(bEditLabirinto))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(spLabirinto, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 245, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        getAccessibleContext().setAccessibleDescription("");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void bEditLabirintoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bEditLabirintoActionPerformed
        GrigliaFrame g;
        int codiceLabirinto;
        try {
            setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));

            codiceLabirinto = Integer.decode(getTCodice().getText());
            g = new GrigliaFrame(codiceLabirinto);
            g.setVisible(true);
        } finally {
            setCursor(Cursor.getDefaultCursor());
            pulisci();
            eseguiQuery();
            setModalita(APPEND_QUERY);
        }
    }//GEN-LAST:event_bEditLabirintoActionPerformed

    @Override
    protected void mostraDati() {
        try {
            tNome.setText(rs.getString("Nome"));
            tLarghezza.setText(rs.getString("DimX"));
            tAltezza.setText(rs.getString("DimY"));
            bEditLabirinto.setEnabled(true);
            bEditLabirinto.setText("Modifica " + rs.getString("Nome"));

            super.mostraDati();
        } catch (SQLException e) {
            mostraErrori(e);
        }
    }

    @Override
    protected void pulisci() {
        super.pulisci();
        tNome.setText("");
        tLarghezza.setText("");
        tAltezza.setText("");
    }

    @Override
    protected PreparedStatement creaSelectStatement() {
        Connection con;
        PreparedStatement st;
        String codice, nome, dimX, dimY;
        Pattern pat;
        Matcher matc;
        int k = 1;
        super.creaSelectStatement();
        codice = getTCodice().getText();
        nome = tNome.getText();
        dimX = tLarghezza.getText();
        dimY = tAltezza.getText();

        query += " where";
        //}
        if (codice.length() > 0) {
            query += " codice= ? and";
        }
        if (nome.length() > 0) {
            if (nome.indexOf("%") >= 0) {
                query += " nome like ? and";
            } else {
                query += " nome = ? and";
            }
        }
        if (dimX.length() > 0) {
            query += " dimx= ? and";
        }
        if (dimY.length() > 0) {
            query += " dimy= ?";
        }
        pat = Pattern.compile("where$|and$");
        matc = pat.matcher(query);
        query = matc.replaceAll("");
        System.out.println(query);
        try {
            con = Database.getDefaultConnection();
            st = con.prepareStatement(query, ResultSet.TYPE_SCROLL_INSENSITIVE,
                    ResultSet.CONCUR_READ_ONLY);

            if (codice.length() > 0) {
                st.setInt(k++, Integer.decode(codice));
            }
            if (nome.length() > 0) {
                st.setString(k++, nome);
            }
            if (dimX.length() > 0) {
                st.setInt(k++, Integer.decode(dimX));
            }
            if (dimY.length() > 0) {
                st.setInt(k++, Integer.decode(dimY));
            }
            return st;
        } catch (SQLException e) {
            mostraErrori(e);
            return null;
        }
    }

    private void validaDimensioniLabirinto(int larghezza, int altezza)
            throws Exception {
        if (altezza > MAX_ALTEZZA || larghezza > MAX_LARGHEZZA
                || altezza < MIN_ALTEZZA || larghezza < MIN_LARGHEZZA) {
            String message = "L'altezza deve essere compresa tra "
                    + MIN_ALTEZZA + " e " + MAX_ALTEZZA + "\n";
            message += "La larghezza deve essere compresa tra "
                    + MIN_LARGHEZZA + " e " + MAX_LARGHEZZA + "\n";
            throw new Exception(message);
        }
    }

    private void validaNomeLabirinto(String nome)
            throws Exception {
        if (nome.length() <= 0) {
            throw new Exception("Inserire un nome per il labirinto!");
        }
    }

    private void validaLabirinto(String nome, int larghezza, int altezza)
            throws Exception {
        validaNomeLabirinto(nome);
        validaDimensioniLabirinto(larghezza, altezza);
    }

    protected PreparedStatement getComandoInserimento(Connection c)
            throws SQLException, Exception {
        String insertQuery;
        PreparedStatement st = null;
        String nome;
        int larghezza, altezza;

        try {
            nome = tNome.getText();
            larghezza = Integer.decode(tLarghezza.getText());
            altezza = Integer.decode(tAltezza.getText());

            validaLabirinto(nome, larghezza, altezza);

            insertQuery = "insert into " + Database.schema + ".labirinto (nome,"
                    + "dimx, dimy) values(?,?,?)";
            st = c.prepareStatement(insertQuery);

            st.setString(1, tNome.getText());
            st.setInt(2, larghezza);
            st.setInt(3, altezza);

        } catch (NumberFormatException e) {
            String message = "Altezza e larghezza devono essere numeri interi";
            throw new Exception(message);
        }
        return st;

    }

    private ResultSet getDatiLabirinto(int codiceLabirinto)
            throws SQLException {
        String selectQuery = "SELECT DimX, DimY FROM labirinto where codice = ?";
        Connection con = Database.getDefaultConnection();
        PreparedStatement st = con.prepareStatement(selectQuery,
                ResultSet.TYPE_SCROLL_INSENSITIVE,
                ResultSet.CONCUR_READ_ONLY);
        st.setInt(1, codiceLabirinto);
        rs = st.executeQuery();
        return rs;
    }

    protected PreparedStatement getComandoAggiornamento(Connection c)
            throws SQLException, Exception {
        PreparedStatement st = null;
        int larghezzaOld, altezzaOld, altezza, larghezza, codiceLabirinto;
        String nome;
        try {
            codiceLabirinto = Integer.decode(getTCodice().getText());
            nome = tNome.getText();
            altezza = Integer.decode(tAltezza.getText());
            larghezza = Integer.decode(tLarghezza.getText());
            altezzaOld = 0;
            larghezzaOld = 0;

            validaLabirinto(nome, larghezza, altezza);

            rs = getDatiLabirinto(codiceLabirinto);
            while (rs.next()) {
                larghezzaOld = rs.getInt("DimX");
                altezzaOld = rs.getInt("DimY");
            }

            if (larghezzaOld != larghezza || altezzaOld != altezza) {
                //Se viene modificata una delle dimensioni cancellare il labirinto 
                //e reinserirlo
                CallableStatement proc =
                        c.prepareCall("{ call reset_labirinto(?, ?, ?) }");
                proc.setInt(1, codiceLabirinto);
                proc.setInt(2, larghezza);
                proc.setInt(3, altezza);
                proc.execute();
            }

            String updateQuery;

            updateQuery = "update " + Database.schema + ".labirinto set nome=?,dimx=?,dimy=? "
                    + "where codice=?";


            st = c.prepareStatement(updateQuery);
            st.setString(1, nome);
            st.setInt(2, larghezza);
            st.setInt(3, altezza);
            st.setInt(4, codiceLabirinto);
        } catch (NumberFormatException e) {
            String message = "Altezza e larghezza devono essere numeri interi";
            throw new Exception(message);
        }
        return st;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bEditLabirinto;
    private javax.swing.JLabel lAltezza;
    private javax.swing.JLabel lLarghezza;
    private javax.swing.JLabel lNome;
    private javax.swing.JScrollPane spLabirinto;
    private javax.swing.JTextField tAltezza;
    private javax.swing.JTextField tLarghezza;
    private javax.swing.JTextField tNome;
    private javax.swing.JTable tabLabirinto;
    // End of variables declaration//GEN-END:variables
}
